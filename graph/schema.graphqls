type Query {
  actor: Actor!
  organization(id: ID!): Organization
}

type Mutation {
  doSomething(task: String!): String!
}

type Actor {
  backingApiUrl: String!
  apiKey: String!
  test: String!
}

type Organization {
  id: ID!
  name: String!
  project(id: ID!): Project!
}

type Project {
  id: ID!
  name: String!
  alerts: [Alert!]
  alert(id: ID!): Alert
}

type Label {
  key: String!
  value: String!
}

type Alert {
  id: ID!
  name: String!
  description: String!
  labels: [Label]
  enableNoDataAlert: Boolean
  enableNoDataDuration: Int
  operand: String
  warningThreshold: Float
  criticalThreshold: Float
  alertingRules: [AlertingRule]!
  destinations: [AlertDestination]!
}

type AlertingRule {
  id: ID!
  updateInterval: Int
  destination: AlertDestination!
}

type AlertDestination {
  id: ID!
  name: String!
  type: String!
  channel: String
  scope: String
  url: String
  customHeaders: [CustomHeader]
  bodyTemplate: String
  integrationKey: String
  serviceNowAuth: String
}

type CustomHeader {
  key: String!
  value: String!
}