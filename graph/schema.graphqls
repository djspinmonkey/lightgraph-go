type Query {
    actor: Actor!
    organization(id: ID!): Organization
    ci(sysID: ID!, className: String!): CI!
}

type Mutation {
    doSomething(task: String!): String!
}

type Actor {
    backingApiUrl: String!
    apiKey: String!
    test: String!
}

type Organization {
    id: ID!
    name: String!
    project(id: ID!): Project!
}

type Project {
    id: ID!
    name: String!
    alerts: [Alert!]
    alert(id: ID!): Alert
}

type Alert {
    id: ID!
    name: String!
    description: String!
    labels: [Label]
    associatedCIIdentifiers: [CIIdentifier]
    associatedCIs: [CI]
    enableNoDataAlert: Boolean
    enableNoDataDuration: Int
    operand: String
    warningThreshold: Float
    criticalThreshold: Float
    status: String
    alertingRules: [AlertingRule]!
    destinations: [AlertDestination]!
    snoozed: Boolean!
    snoozedUntil: Int
}

type AlertingRule {
    id: ID!
    updateInterval: Int
    destination: AlertDestination!
}

type AlertDestination {
    id: ID!
    name: String!
    type: String!
    channel: String
    scope: String
    url: String
    customHeaders: [CustomHeader]
    bodyTemplate: String
    integrationKey: String
    serviceNowAuth: [AuthValue]
}

type CI {
    ciIdentifier: CIIdentifier
    name: String
    assetTag: ID
    subCategory: String
    serialNumber: String
    assetLink: String
    assetDisplayValue: String
    assetValue: String
    attributesJSON: String
}

type CIIdentifier {
    className: String
    sysId: String
}

type Label {
    key: String!
    value: String!
}

type CustomHeader {
    key: String!
    value: String!
}

type AuthValue {
    key: String!
    value: String!
}